// Code generated by protoc-gen-triple. DO NOT EDIT.
//
// Source: proto/user.proto
package user

import (
	"context"
)

import (
	"dubbo.apache.org/dubbo-go/v3"
	"dubbo.apache.org/dubbo-go/v3/client"
	"dubbo.apache.org/dubbo-go/v3/common"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/protocol/triple/triple_protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
)

// This is a compile-time assertion to ensure that this generated file and the Triple package
// are compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of Triple newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of Triple or updating the Triple
// version compiled into your binary.
const _ = triple_protocol.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/user.UserService/GetUser"
)

var (
	_ UserService = (*UserServiceImpl)(nil)
)

// UserService is a client for the user.UserService service.
type UserService interface {
	GetUser(ctx context.Context, req *UserRequest, opts ...client.CallOption) (*UserReply, error)
}

// NewUserService constructs a client for the user.UserService service.
func NewUserService(cli *client.Client, opts ...client.ReferenceOption) (UserService, error) {
	conn, err := cli.DialWithInfo("user.UserService", &UserService_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &UserServiceImpl{
		conn: conn,
	}, nil
}

func SetConsumerUserService(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &UserService_ClientInfo)
}

// UserServiceImpl implements UserService.
type UserServiceImpl struct {
	conn *client.Connection
}

func (c *UserServiceImpl) GetUser(ctx context.Context, req *UserRequest, opts ...client.CallOption) (*UserReply, error) {
	resp := new(UserReply)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "GetUser", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

var UserService_ClientInfo = client.ClientInfo{
	InterfaceName: "user.UserService",
	MethodNames:   []string{"GetUser"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*UserServiceImpl)
		dubboCli.conn = conn
	},
}

// UserServiceHandler is an implementation of the user.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterUserServiceHandler(srv *server.Server, hdlr UserServiceHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &UserService_ServiceInfo, opts...)
}

func SetProviderUserService(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &UserService_ServiceInfo)
}

var UserService_ServiceInfo = server.ServiceInfo{
	InterfaceName: "user.UserService",
	ServiceType:   (*UserServiceHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "GetUser",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(UserRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*UserRequest)
				res, err := handler.(UserServiceHandler).GetUser(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
