// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: msg/collab.proto

package messagepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 轻量动作类别（可观测/粗粒度路由）。真正类型以 Any.type_url 为准。
type ActionKind int32

const (
	ActionKind_ACTION_KIND_UNSPECIFIED ActionKind = 0
	ActionKind_ACTION_KIND_VOTE        ActionKind = 1  // 投票类
	ActionKind_ACTION_KIND_FORM        ActionKind = 2  // 表单/问卷
	ActionKind_ACTION_KIND_TASK        ActionKind = 3  // 任务/看板/流程
	ActionKind_ACTION_KIND_GAME        ActionKind = 4  // 小游戏/对局
	ActionKind_ACTION_KIND_DOC         ActionKind = 5  // 文档/白板/协作编辑
	ActionKind_ACTION_KIND_CUSTOM      ActionKind = 15 // 自定义/其他
)

// Enum value maps for ActionKind.
var (
	ActionKind_name = map[int32]string{
		0:  "ACTION_KIND_UNSPECIFIED",
		1:  "ACTION_KIND_VOTE",
		2:  "ACTION_KIND_FORM",
		3:  "ACTION_KIND_TASK",
		4:  "ACTION_KIND_GAME",
		5:  "ACTION_KIND_DOC",
		15: "ACTION_KIND_CUSTOM",
	}
	ActionKind_value = map[string]int32{
		"ACTION_KIND_UNSPECIFIED": 0,
		"ACTION_KIND_VOTE":        1,
		"ACTION_KIND_FORM":        2,
		"ACTION_KIND_TASK":        3,
		"ACTION_KIND_GAME":        4,
		"ACTION_KIND_DOC":         5,
		"ACTION_KIND_CUSTOM":      15,
	}
)

func (x ActionKind) Enum() *ActionKind {
	p := new(ActionKind)
	*p = x
	return p
}

func (x ActionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_message_collab_proto_enumTypes[0].Descriptor()
}

func (ActionKind) Type() protoreflect.EnumType {
	return &file_message_collab_proto_enumTypes[0]
}

func (x ActionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionKind.Descriptor instead.
func (ActionKind) EnumDescriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{0}
}

type DeltaOp_Format int32

const (
	DeltaOp_DELTA_FORMAT_UNSPECIFIED DeltaOp_Format = 0
	DeltaOp_DELTA_FORMAT_JSON_PATCH  DeltaOp_Format = 1 // RFC 6902 JSON Patch
	DeltaOp_DELTA_FORMAT_CRDT        DeltaOp_Format = 2 // 任意 CRDT 序列化
)

// Enum value maps for DeltaOp_Format.
var (
	DeltaOp_Format_name = map[int32]string{
		0: "DELTA_FORMAT_UNSPECIFIED",
		1: "DELTA_FORMAT_JSON_PATCH",
		2: "DELTA_FORMAT_CRDT",
	}
	DeltaOp_Format_value = map[string]int32{
		"DELTA_FORMAT_UNSPECIFIED": 0,
		"DELTA_FORMAT_JSON_PATCH":  1,
		"DELTA_FORMAT_CRDT":        2,
	}
)

func (x DeltaOp_Format) Enum() *DeltaOp_Format {
	p := new(DeltaOp_Format)
	*p = x
	return p
}

func (x DeltaOp_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeltaOp_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_message_collab_proto_enumTypes[1].Descriptor()
}

func (DeltaOp_Format) Type() protoreflect.EnumType {
	return &file_message_collab_proto_enumTypes[1]
}

func (x DeltaOp_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeltaOp_Format.Descriptor instead.
func (DeltaOp_Format) EnumDescriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{1, 0}
}

// 动作信封：统一承载各种协作操作，动态扩展的核心。
type ActionEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// —— 目标与因果 —— //
	TargetClientMsgId string `protobuf:"bytes,1,opt,name=target_client_msg_id,json=targetClientMsgId,proto3" json:"target_client_msg_id,omitempty"` // 作用对象：通常是发起的协作消息（如投票/表单原消息）
	ParentActionId    string `protobuf:"bytes,2,opt,name=parent_action_id,json=parentActionId,proto3" json:"parent_action_id,omitempty"`            // 因果链：父动作ID（例如对某次提交的修改/撤销）
	ReplyToActionId   string `protobuf:"bytes,3,opt,name=reply_to_action_id,json=replyToActionId,proto3" json:"reply_to_action_id,omitempty"`       // 直接回复的动作ID（与 parent 不同的引用语义）
	// —— 参与者与时间 —— //
	ActorId   string `protobuf:"bytes,4,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`       // 执行动作的用户
	ActedAt   int64  `protobuf:"varint,5,opt,name=acted_at,json=actedAt,proto3" json:"acted_at,omitempty"`      // 毫秒时间戳
	TenantId  string `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`    // 租户/空间（多租户隔离）
	GuildId   string `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`       // 公域服务器（Discord 类）
	ChannelId string `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // 频道
	ThreadId  string `protobuf:"bytes,9,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`    // 话题/子线程
	// —— 幂等/事务/关联 —— //
	ActionId       string `protobuf:"bytes,10,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`                   // 本动作的唯一ID（服务器生成/返回）
	IdempotencyKey string `protobuf:"bytes,11,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"` // 客户端生成的幂等键（窗口期重复提交只生效一次）
	TxnId          string `protobuf:"bytes,12,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                            // 事务ID（跨多个动作的原子提交/回滚）
	CorrelationId  string `protobuf:"bytes,13,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`    // 关联ID（把请求/回调/日志串起来）
	// —— 版本/序列 —— //
	Version int64 `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`                // 目标对象的期望版本（乐观锁），服务端可返回冲突
	SeqHint int64 `protobuf:"varint,15,opt,name=seq_hint,json=seqHint,proto3" json:"seq_hint,omitempty"` // 客户端侧临时序号提示（网关可忽略）
	// —— 路由/观测 —— //
	Kind    ActionKind `protobuf:"varint,16,opt,name=kind,proto3,enum=msg.v1.ActionKind" json:"kind,omitempty"` // 粗粒度类别（可选，便于观测）
	TypeUrl string     `protobuf:"bytes,17,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`        // Any 的类型URL（冗余写入，便于直观路由与调试）
	// —— 负载（动态扩展的关键） —— //
	//
	//	约定：payload 的具体 msg 通过 type_url 唯一标识，
	//	如 "type.openim/vote.VoteActionV1" 或 "type.openim/form.FormSubmitV1"
	Payload *anypb.Any `protobuf:"bytes,18,opt,name=payload,proto3" json:"payload,omitempty"` // 动作内容（任意 msg）
	// —— 可选：协作编辑/增量（JSON Patch 或 CRDT 操作） —— //
	Delta *DeltaOp `protobuf:"bytes,19,opt,name=delta,proto3" json:"delta,omitempty"`
	// —— 标签与扩展 —— //
	Tags    []string          `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                         // 检索/审计标签
	Meta    map[string]string `protobuf:"bytes,21,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key-value 轻量扩展（小体量）
	ExtBlob []byte            `protobuf:"bytes,22,opt,name=ext_blob,json=extBlob,proto3" json:"ext_blob,omitempty"`                                                                    // 大扩展块（二进制、自定义协议）
	// —— 客户端上下文（便于调试/灰度） —— //
	DeviceId   string `protobuf:"bytes,30,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Platform   string `protobuf:"bytes,31,opt,name=platform,proto3" json:"platform,omitempty"` // iOS/Android/Web/PC
	AppVersion string `protobuf:"bytes,32,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Locale     string `protobuf:"bytes,33,opt,name=locale,proto3" json:"locale,omitempty"` // zh-CN/en-US
}

func (x *ActionEnvelope) Reset() {
	*x = ActionEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEnvelope) ProtoMessage() {}

func (x *ActionEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEnvelope.ProtoReflect.Descriptor instead.
func (*ActionEnvelope) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{0}
}

func (x *ActionEnvelope) GetTargetClientMsgId() string {
	if x != nil {
		return x.TargetClientMsgId
	}
	return ""
}

func (x *ActionEnvelope) GetParentActionId() string {
	if x != nil {
		return x.ParentActionId
	}
	return ""
}

func (x *ActionEnvelope) GetReplyToActionId() string {
	if x != nil {
		return x.ReplyToActionId
	}
	return ""
}

func (x *ActionEnvelope) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ActionEnvelope) GetActedAt() int64 {
	if x != nil {
		return x.ActedAt
	}
	return 0
}

func (x *ActionEnvelope) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ActionEnvelope) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ActionEnvelope) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ActionEnvelope) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ActionEnvelope) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionEnvelope) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *ActionEnvelope) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *ActionEnvelope) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ActionEnvelope) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ActionEnvelope) GetSeqHint() int64 {
	if x != nil {
		return x.SeqHint
	}
	return 0
}

func (x *ActionEnvelope) GetKind() ActionKind {
	if x != nil {
		return x.Kind
	}
	return ActionKind_ACTION_KIND_UNSPECIFIED
}

func (x *ActionEnvelope) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *ActionEnvelope) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ActionEnvelope) GetDelta() *DeltaOp {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ActionEnvelope) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ActionEnvelope) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ActionEnvelope) GetExtBlob() []byte {
	if x != nil {
		return x.ExtBlob
	}
	return nil
}

func (x *ActionEnvelope) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ActionEnvelope) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ActionEnvelope) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ActionEnvelope) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// 协作编辑/增量操作（可选）
// 同时兼容 JSON Patch 与 CRDT 的载体：二选一或同时附带（视业务需要）。
type DeltaOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId       string         `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`                      // 文档/白板/数据对象ID
	Format      DeltaOp_Format `protobuf:"varint,2,opt,name=format,proto3,enum=msg.v1.DeltaOp_Format" json:"format,omitempty"` // 增量格式
	JsonPatch   string         `protobuf:"bytes,3,opt,name=json_patch,json=jsonPatch,proto3" json:"json_patch,omitempty"`          // JSON Patch 字符串（当 format=JSON_PATCH）
	CrdtBlob    []byte         `protobuf:"bytes,4,opt,name=crdt_blob,json=crdtBlob,proto3" json:"crdt_blob,omitempty"`             // CRDT 二进制（当 format=CRDT）
	BaseVersion int64          `protobuf:"varint,5,opt,name=base_version,json=baseVersion,proto3" json:"base_version,omitempty"`   // 基线版本（便于冲突检测/合并）
	AppliedAt   int64          `protobuf:"varint,6,opt,name=applied_at,json=appliedAt,proto3" json:"applied_at,omitempty"`         // 应用时间（ms）
}

func (x *DeltaOp) Reset() {
	*x = DeltaOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaOp) ProtoMessage() {}

func (x *DeltaOp) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaOp.ProtoReflect.Descriptor instead.
func (*DeltaOp) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{1}
}

func (x *DeltaOp) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DeltaOp) GetFormat() DeltaOp_Format {
	if x != nil {
		return x.Format
	}
	return DeltaOp_DELTA_FORMAT_UNSPECIFIED
}

func (x *DeltaOp) GetJsonPatch() string {
	if x != nil {
		return x.JsonPatch
	}
	return ""
}

func (x *DeltaOp) GetCrdtBlob() []byte {
	if x != nil {
		return x.CrdtBlob
	}
	return nil
}

func (x *DeltaOp) GetBaseVersion() int64 {
	if x != nil {
		return x.BaseVersion
	}
	return 0
}

func (x *DeltaOp) GetAppliedAt() int64 {
	if x != nil {
		return x.AppliedAt
	}
	return 0
}

// 动作响应：用于 ACK/回执
type ActionAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId          string `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"` // 成功动作ID
	TargetClientMsgId string `protobuf:"bytes,2,opt,name=target_client_msg_id,json=targetClientMsgId,proto3" json:"target_client_msg_id,omitempty"`
	NewVersion        int64  `protobuf:"varint,3,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`         // 服务端合并后的最新版本
	ServerTime        int64  `protobuf:"varint,4,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`         // 服务器时间戳（ms）
	CorrelationId     string `protobuf:"bytes,5,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // 与请求对应
}

func (x *ActionAck) Reset() {
	*x = ActionAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAck) ProtoMessage() {}

func (x *ActionAck) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAck.ProtoReflect.Descriptor instead.
func (*ActionAck) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{2}
}

func (x *ActionAck) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionAck) GetTargetClientMsgId() string {
	if x != nil {
		return x.TargetClientMsgId
	}
	return ""
}

func (x *ActionAck) GetNewVersion() int64 {
	if x != nil {
		return x.NewVersion
	}
	return 0
}

func (x *ActionAck) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *ActionAck) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

// 动作错误：用于冲突/权限/校验失败等
type ActionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`       // "CONFLICT" / "FORBIDDEN" / "INVALID" / ...
	Message       string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"` // 错误描述
	Detail        string `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`   // 细节
	ServerTime    int64  `protobuf:"varint,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	// 可选：返回当前服务端视角的状态片段（例如服务端版本、已存在的选择等）
	ServerView *anypb.Any `protobuf:"bytes,6,opt,name=server_view,json=serverView,proto3" json:"server_view,omitempty"`
}

func (x *ActionError) Reset() {
	*x = ActionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionError) ProtoMessage() {}

func (x *ActionError) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionError.ProtoReflect.Descriptor instead.
func (*ActionError) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{3}
}

func (x *ActionError) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ActionError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ActionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ActionError) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ActionError) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *ActionError) GetServerView() *anypb.Any {
	if x != nil {
		return x.ServerView
	}
	return nil
}

// 订阅协作动作（例如服务端推送特定 kind/type 的变更或回执）
type ActionSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kinds       []ActionKind `protobuf:"varint,1,rep,packed,name=kinds,proto3,enum=msg.v1.ActionKind" json:"kinds,omitempty"` // 订阅某些类别
	TypeUrls    []string     `protobuf:"bytes,2,rep,name=type_urls,json=typeUrls,proto3" json:"type_urls,omitempty"`              // 精确订阅某些 Any 类型
	GuildIds    []string     `protobuf:"bytes,3,rep,name=guild_ids,json=guildIds,proto3" json:"guild_ids,omitempty"`
	ChannelIds  []string     `protobuf:"bytes,4,rep,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
	ThreadIds   []string     `protobuf:"bytes,5,rep,name=thread_ids,json=threadIds,proto3" json:"thread_ids,omitempty"`
	AckRequired bool         `protobuf:"varint,10,opt,name=ack_required,json=ackRequired,proto3" json:"ack_required,omitempty"` // 是否需要 ACK 动作推送
}

func (x *ActionSubscribe) Reset() {
	*x = ActionSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSubscribe) ProtoMessage() {}

func (x *ActionSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSubscribe.ProtoReflect.Descriptor instead.
func (*ActionSubscribe) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{4}
}

func (x *ActionSubscribe) GetKinds() []ActionKind {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *ActionSubscribe) GetTypeUrls() []string {
	if x != nil {
		return x.TypeUrls
	}
	return nil
}

func (x *ActionSubscribe) GetGuildIds() []string {
	if x != nil {
		return x.GuildIds
	}
	return nil
}

func (x *ActionSubscribe) GetChannelIds() []string {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ActionSubscribe) GetThreadIds() []string {
	if x != nil {
		return x.ThreadIds
	}
	return nil
}

func (x *ActionSubscribe) GetAckRequired() bool {
	if x != nil {
		return x.AckRequired
	}
	return false
}

// —— 投票示例 —— //
type VoteActionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteId            string   `protobuf:"bytes,1,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`                                    // 投票ID
	SelectedOptionIds []string `protobuf:"bytes,2,rep,name=selected_option_ids,json=selectedOptionIds,proto3" json:"selected_option_ids,omitempty"` // 本次选择
	Revoke            bool     `protobuf:"varint,3,opt,name=revoke,proto3" json:"revoke,omitempty"`                                                 // 撤销投票
}

func (x *VoteActionV1) Reset() {
	*x = VoteActionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteActionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteActionV1) ProtoMessage() {}

func (x *VoteActionV1) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteActionV1.ProtoReflect.Descriptor instead.
func (*VoteActionV1) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{5}
}

func (x *VoteActionV1) GetVoteId() string {
	if x != nil {
		return x.VoteId
	}
	return ""
}

func (x *VoteActionV1) GetSelectedOptionIds() []string {
	if x != nil {
		return x.SelectedOptionIds
	}
	return nil
}

func (x *VoteActionV1) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

// —— 表单示例 —— //
type FormSubmitV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId   string         `protobuf:"bytes,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	Fields   []*FormFieldKV `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`      // 本次提交的字段
	Finalize bool           `protobuf:"varint,3,opt,name=finalize,proto3" json:"finalize,omitempty"` // 是否提交最终版
}

func (x *FormSubmitV1) Reset() {
	*x = FormSubmitV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSubmitV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSubmitV1) ProtoMessage() {}

func (x *FormSubmitV1) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSubmitV1.ProtoReflect.Descriptor instead.
func (*FormSubmitV1) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{6}
}

func (x *FormSubmitV1) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *FormSubmitV1) GetFields() []*FormFieldKV {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FormSubmitV1) GetFinalize() bool {
	if x != nil {
		return x.Finalize
	}
	return false
}

type FormFieldKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId string `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // 建议规范化为字符串；需要结构化时可改 bytes + type_url
}

func (x *FormFieldKV) Reset() {
	*x = FormFieldKV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormFieldKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormFieldKV) ProtoMessage() {}

func (x *FormFieldKV) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormFieldKV.ProtoReflect.Descriptor instead.
func (*FormFieldKV) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{7}
}

func (x *FormFieldKV) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *FormFieldKV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// —— 任务/流程示例 —— //
type TaskUpdateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string            `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Action string            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                                                                                         // "create" / "assign" / "move" / "done" ...
	Fields map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 任意字段更新
}

func (x *TaskUpdateV1) Reset() {
	*x = TaskUpdateV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateV1) ProtoMessage() {}

func (x *TaskUpdateV1) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateV1.ProtoReflect.Descriptor instead.
func (*TaskUpdateV1) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{8}
}

func (x *TaskUpdateV1) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskUpdateV1) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TaskUpdateV1) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// —— 文档/白板编辑：也可直接使用 DeltaOp 搭配 Any —— //
type DocEditV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId string   `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Delta *DeltaOp `protobuf:"bytes,2,opt,name=delta,proto3" json:"delta,omitempty"` // 推荐用 DeltaOp
}

func (x *DocEditV1) Reset() {
	*x = DocEditV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocEditV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocEditV1) ProtoMessage() {}

func (x *DocEditV1) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocEditV1.ProtoReflect.Descriptor instead.
func (*DocEditV1) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{9}
}

func (x *DocEditV1) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DocEditV1) GetDelta() *DeltaOp {
	if x != nil {
		return x.Delta
	}
	return nil
}

type CoopAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ⚠️ 已弃用：用 ActionEnvelope 替代
	TargetClientMsgId string `protobuf:"bytes,1,opt,name=target_client_msg_id,json=targetClientMsgId,proto3" json:"target_client_msg_id,omitempty"`
	Version           int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Action:
	//
	//	*CoopAction_VoteAction
	//	*CoopAction_FormSubmit
	//	*CoopAction_TaskUpdate
	//	*CoopAction_DocEdit
	Action  isCoopAction_Action `protobuf_oneof:"action"`
	ActorId string              `protobuf:"bytes,20,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActedAt int64               `protobuf:"varint,21,opt,name=acted_at,json=actedAt,proto3" json:"acted_at,omitempty"`
	Ext     string              `protobuf:"bytes,22,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *CoopAction) Reset() {
	*x = CoopAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_collab_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopAction) ProtoMessage() {}

func (x *CoopAction) ProtoReflect() protoreflect.Message {
	mi := &file_message_collab_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopAction.ProtoReflect.Descriptor instead.
func (*CoopAction) Descriptor() ([]byte, []int) {
	return file_message_collab_proto_rawDescGZIP(), []int{10}
}

func (x *CoopAction) GetTargetClientMsgId() string {
	if x != nil {
		return x.TargetClientMsgId
	}
	return ""
}

func (x *CoopAction) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *CoopAction) GetAction() isCoopAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *CoopAction) GetVoteAction() *VoteActionV1 {
	if x, ok := x.GetAction().(*CoopAction_VoteAction); ok {
		return x.VoteAction
	}
	return nil
}

func (x *CoopAction) GetFormSubmit() *FormSubmitV1 {
	if x, ok := x.GetAction().(*CoopAction_FormSubmit); ok {
		return x.FormSubmit
	}
	return nil
}

func (x *CoopAction) GetTaskUpdate() *TaskUpdateV1 {
	if x, ok := x.GetAction().(*CoopAction_TaskUpdate); ok {
		return x.TaskUpdate
	}
	return nil
}

func (x *CoopAction) GetDocEdit() *DocEditV1 {
	if x, ok := x.GetAction().(*CoopAction_DocEdit); ok {
		return x.DocEdit
	}
	return nil
}

func (x *CoopAction) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *CoopAction) GetActedAt() int64 {
	if x != nil {
		return x.ActedAt
	}
	return 0
}

func (x *CoopAction) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type isCoopAction_Action interface {
	isCoopAction_Action()
}

type CoopAction_VoteAction struct {
	VoteAction *VoteActionV1 `protobuf:"bytes,10,opt,name=vote_action,json=voteAction,proto3,oneof"`
}

type CoopAction_FormSubmit struct {
	FormSubmit *FormSubmitV1 `protobuf:"bytes,11,opt,name=form_submit,json=formSubmit,proto3,oneof"`
}

type CoopAction_TaskUpdate struct {
	TaskUpdate *TaskUpdateV1 `protobuf:"bytes,12,opt,name=task_update,json=taskUpdate,proto3,oneof"`
}

type CoopAction_DocEdit struct {
	DocEdit *DocEditV1 `protobuf:"bytes,13,opt,name=doc_edit,json=docEdit,proto3,oneof"`
}

func (*CoopAction_VoteAction) isCoopAction_Action() {}

func (*CoopAction_FormSubmit) isCoopAction_Action() {}

func (*CoopAction_TaskUpdate) isCoopAction_Action() {}

func (*CoopAction_DocEdit) isCoopAction_Action() {}

var File_message_collab_proto protoreflect.FileDescriptor

var file_message_collab_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x07,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x71, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x05, 0x08, 0x64, 0x10, 0x82, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x4f, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x64, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x72, 0x64, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x4c, 0x54, 0x41,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x43, 0x52, 0x44, 0x54, 0x10, 0x02, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd2,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x6b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x6f, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x22, 0x74, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4b, 0x56, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x56, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x45, 0x64, 0x69, 0x74, 0x56,
	0x31, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0a,
	0x76, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x45, 0x64, 0x69, 0x74, 0x56, 0x31, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x45, 0x64, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x64, 0x10, 0x6e,
	0x2a, 0xae, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x0f, 0x42, 0x1f, 0x5a, 0x1d, 0x50, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_collab_proto_rawDescOnce sync.Once
	file_message_collab_proto_rawDescData = file_message_collab_proto_rawDesc
)

func file_message_collab_proto_rawDescGZIP() []byte {
	file_message_collab_proto_rawDescOnce.Do(func() {
		file_message_collab_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_collab_proto_rawDescData)
	})
	return file_message_collab_proto_rawDescData
}

var file_message_collab_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_message_collab_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_message_collab_proto_goTypes = []any{
	(ActionKind)(0),         // 0: msg.v1.ActionKind
	(DeltaOp_Format)(0),     // 1: msg.v1.DeltaOp.Format
	(*ActionEnvelope)(nil),  // 2: msg.v1.ActionEnvelope
	(*DeltaOp)(nil),         // 3: msg.v1.DeltaOp
	(*ActionAck)(nil),       // 4: msg.v1.ActionAck
	(*ActionError)(nil),     // 5: msg.v1.ActionError
	(*ActionSubscribe)(nil), // 6: msg.v1.ActionSubscribe
	(*VoteActionV1)(nil),    // 7: msg.v1.VoteActionV1
	(*FormSubmitV1)(nil),    // 8: msg.v1.FormSubmitV1
	(*FormFieldKV)(nil),     // 9: msg.v1.FormFieldKV
	(*TaskUpdateV1)(nil),    // 10: msg.v1.TaskUpdateV1
	(*DocEditV1)(nil),       // 11: msg.v1.DocEditV1
	(*CoopAction)(nil),      // 12: msg.v1.CoopAction
	nil,                     // 13: msg.v1.ActionEnvelope.MetaEntry
	nil,                     // 14: msg.v1.TaskUpdateV1.FieldsEntry
	(*anypb.Any)(nil),       // 15: google.protobuf.Any
}
var file_message_collab_proto_depIdxs = []int32{
	0,  // 0: msg.v1.ActionEnvelope.kind:type_name -> msg.v1.ActionKind
	15, // 1: msg.v1.ActionEnvelope.payload:type_name -> google.protobuf.Any
	3,  // 2: msg.v1.ActionEnvelope.delta:type_name -> msg.v1.DeltaOp
	13, // 3: msg.v1.ActionEnvelope.meta:type_name -> msg.v1.ActionEnvelope.MetaEntry
	1,  // 4: msg.v1.DeltaOp.format:type_name -> msg.v1.DeltaOp.Format
	15, // 5: msg.v1.ActionError.server_view:type_name -> google.protobuf.Any
	0,  // 6: msg.v1.ActionSubscribe.kinds:type_name -> msg.v1.ActionKind
	9,  // 7: msg.v1.FormSubmitV1.fields:type_name -> msg.v1.FormFieldKV
	14, // 8: msg.v1.TaskUpdateV1.fields:type_name -> msg.v1.TaskUpdateV1.FieldsEntry
	3,  // 9: msg.v1.DocEditV1.delta:type_name -> msg.v1.DeltaOp
	7,  // 10: msg.v1.CoopAction.vote_action:type_name -> msg.v1.VoteActionV1
	8,  // 11: msg.v1.CoopAction.form_submit:type_name -> msg.v1.FormSubmitV1
	10, // 12: msg.v1.CoopAction.task_update:type_name -> msg.v1.TaskUpdateV1
	11, // 13: msg.v1.CoopAction.doc_edit:type_name -> msg.v1.DocEditV1
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_message_collab_proto_init() }
func file_message_collab_proto_init() {
	if File_message_collab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_collab_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ActionEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeltaOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ActionAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ActionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ActionSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*VoteActionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FormSubmitV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FormFieldKV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TaskUpdateV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DocEditV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_collab_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CoopAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_collab_proto_msgTypes[10].OneofWrappers = []any{
		(*CoopAction_VoteAction)(nil),
		(*CoopAction_FormSubmit)(nil),
		(*CoopAction_TaskUpdate)(nil),
		(*CoopAction_DocEdit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_collab_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_collab_proto_goTypes,
		DependencyIndexes: file_message_collab_proto_depIdxs,
		EnumInfos:         file_message_collab_proto_enumTypes,
		MessageInfos:      file_message_collab_proto_msgTypes,
	}.Build()
	File_message_collab_proto = out.File
	file_message_collab_proto_rawDesc = nil
	file_message_collab_proto_goTypes = nil
	file_message_collab_proto_depIdxs = nil
}
