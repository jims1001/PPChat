// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: message/frame.proto

package messagepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 帧类型（保持兼容，同时可继续扩展）
type MessageFrameData_Type int32

const (
	MessageFrameData_TYPE_UNSPECIFIED MessageFrameData_Type = 0
	MessageFrameData_DATA             MessageFrameData_Type = 1 // 业务消息：payload = messageData
	MessageFrameData_REGISTER         MessageFrameData_Type = 2 // 上线
	MessageFrameData_UNREGISTER       MessageFrameData_Type = 3 // 下线
	MessageFrameData_DELIVER          MessageFrameData_Type = 4 // 服务端主动下发
	MessageFrameData_PING             MessageFrameData_Type = 5 // 心跳
	MessageFrameData_MESSAGE_UPDATE   MessageFrameData_Type = 6 // 编辑/版本更新
	MessageFrameData_MESSAGE_ACTION   MessageFrameData_Type = 7 // 协作动作（表单/投票等）
	MessageFrameData_SYSTEM_EVENT     MessageFrameData_Type = 8 // 系统事件（转接/强制下线等）
)

// Enum value maps for MessageFrameData_Type.
var (
	MessageFrameData_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DATA",
		2: "REGISTER",
		3: "UNREGISTER",
		4: "DELIVER",
		5: "PING",
		6: "MESSAGE_UPDATE",
		7: "MESSAGE_ACTION",
		8: "SYSTEM_EVENT",
	}
	MessageFrameData_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"DATA":             1,
		"REGISTER":         2,
		"UNREGISTER":       3,
		"DELIVER":          4,
		"PING":             5,
		"MESSAGE_UPDATE":   6,
		"MESSAGE_ACTION":   7,
		"SYSTEM_EVENT":     8,
	}
)

func (x MessageFrameData_Type) Enum() *MessageFrameData_Type {
	p := new(MessageFrameData_Type)
	*p = x
	return p
}

func (x MessageFrameData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFrameData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_message_frame_proto_enumTypes[0].Descriptor()
}

func (MessageFrameData_Type) Type() protoreflect.EnumType {
	return &file_message_frame_proto_enumTypes[0]
}

func (x MessageFrameData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFrameData_Type.Descriptor instead.
func (MessageFrameData_Type) EnumDescriptor() ([]byte, []int) {
	return file_message_frame_proto_rawDescGZIP(), []int{0, 0}
}

// 传输服务质量
type MessageFrameData_QoS int32

const (
	MessageFrameData_QOS_AT_MOST_ONCE  MessageFrameData_QoS = 0 // 最多一次
	MessageFrameData_QOS_AT_LEAST_ONCE MessageFrameData_QoS = 1 // 至少一次
	MessageFrameData_QOS_EXACTLY_ONCE  MessageFrameData_QoS = 2 // 恰好一次
)

// Enum value maps for MessageFrameData_QoS.
var (
	MessageFrameData_QoS_name = map[int32]string{
		0: "QOS_AT_MOST_ONCE",
		1: "QOS_AT_LEAST_ONCE",
		2: "QOS_EXACTLY_ONCE",
	}
	MessageFrameData_QoS_value = map[string]int32{
		"QOS_AT_MOST_ONCE":  0,
		"QOS_AT_LEAST_ONCE": 1,
		"QOS_EXACTLY_ONCE":  2,
	}
)

func (x MessageFrameData_QoS) Enum() *MessageFrameData_QoS {
	p := new(MessageFrameData_QoS)
	*p = x
	return p
}

func (x MessageFrameData_QoS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFrameData_QoS) Descriptor() protoreflect.EnumDescriptor {
	return file_message_frame_proto_enumTypes[1].Descriptor()
}

func (MessageFrameData_QoS) Type() protoreflect.EnumType {
	return &file_message_frame_proto_enumTypes[1]
}

func (x MessageFrameData_QoS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFrameData_QoS.Descriptor instead.
func (MessageFrameData_QoS) EnumDescriptor() ([]byte, []int) {
	return file_message_frame_proto_rawDescGZIP(), []int{0, 1}
}

// 优先级
type MessageFrameData_Priority int32

const (
	MessageFrameData_PRIORITY_DEFAULT MessageFrameData_Priority = 0
	MessageFrameData_PRIORITY_LOW     MessageFrameData_Priority = 1
	MessageFrameData_PRIORITY_HIGH    MessageFrameData_Priority = 2
	MessageFrameData_PRIORITY_URGENT  MessageFrameData_Priority = 3
)

// Enum value maps for MessageFrameData_Priority.
var (
	MessageFrameData_Priority_name = map[int32]string{
		0: "PRIORITY_DEFAULT",
		1: "PRIORITY_LOW",
		2: "PRIORITY_HIGH",
		3: "PRIORITY_URGENT",
	}
	MessageFrameData_Priority_value = map[string]int32{
		"PRIORITY_DEFAULT": 0,
		"PRIORITY_LOW":     1,
		"PRIORITY_HIGH":    2,
		"PRIORITY_URGENT":  3,
	}
)

func (x MessageFrameData_Priority) Enum() *MessageFrameData_Priority {
	p := new(MessageFrameData_Priority)
	*p = x
	return p
}

func (x MessageFrameData_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFrameData_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_message_frame_proto_enumTypes[2].Descriptor()
}

func (MessageFrameData_Priority) Type() protoreflect.EnumType {
	return &file_message_frame_proto_enumTypes[2]
}

func (x MessageFrameData_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFrameData_Priority.Descriptor instead.
func (MessageFrameData_Priority) EnumDescriptor() ([]byte, []int) {
	return file_message_frame_proto_rawDescGZIP(), []int{0, 2}
}

// ==========================================================
//
//	传输帧（增强版，安全+扩展）
//
// ==========================================================
type MessageFrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// —— 必要头字段 —— //
	Type      MessageFrameData_Type `protobuf:"varint,1,opt,name=type,proto3,enum=message.v1.MessageFrameData_Type" json:"type,omitempty"` // 帧类型
	From      string                `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                        // 发送方（建议由网关注入）
	To        string                `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                            // 接收方 userID/groupID
	Ts        int64                 `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`                                           // 发送毫秒时间戳
	GatewayId string                `protobuf:"bytes,5,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`             // 网关节点
	ConnId    string                `protobuf:"bytes,6,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`                      // 连接ID
	TenantId  string                `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                // 多租户隔离
	AppId     string                `protobuf:"bytes,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                         // 应用/业务ID
	// —— 传输策略/风控 —— //
	Qos         MessageFrameData_QoS      `protobuf:"varint,10,opt,name=qos,proto3,enum=message.v1.MessageFrameData_QoS" json:"qos,omitempty"`                // 传输QoS
	Priority    MessageFrameData_Priority `protobuf:"varint,11,opt,name=priority,proto3,enum=message.v1.MessageFrameData_Priority" json:"priority,omitempty"` // 优先级
	AckRequired bool                      `protobuf:"varint,12,opt,name=ack_required,json=ackRequired,proto3" json:"ack_required,omitempty"`                  // 是否需要ACK
	AckId       string                    `protobuf:"bytes,13,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`                                     // ACK对应ID
	DedupId     string                    `protobuf:"bytes,14,opt,name=dedup_id,json=dedupId,proto3" json:"dedup_id,omitempty"`                               // 幂等ID（去重窗口唯一）
	Nonce       string                    `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                  // 随机数（配合 ts 防重放）
	ExpiresAt   int64                     `protobuf:"varint,16,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                        // 过期时间（ms）
	// —— 调试/审计 —— //
	TraceId    string            `protobuf:"bytes,20,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                                                                    // 链路追踪
	SessionId  string            `protobuf:"bytes,21,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                              // 会话ID（客服/协作）
	DeviceId   string            `protobuf:"bytes,22,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                                                 // 设备ID
	Platform   string            `protobuf:"bytes,23,opt,name=platform,proto3" json:"platform,omitempty"`                                                                                 // iOS/Android/Web/PC
	AppVersion string            `protobuf:"bytes,24,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`                                                           // 客户端版本
	Locale     string            `protobuf:"bytes,25,opt,name=locale,proto3" json:"locale,omitempty"`                                                                                     // zh-CN/en-US
	Meta       map[string]string `protobuf:"bytes,26,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 上下文键值
	// —— 载荷（三选一：明文/任意/密文；当前推荐用 payload 明文） —— //
	//
	// Types that are assignable to Body:
	//
	//	*MessageFrameData_Payload
	//	*MessageFrameData_AnyPayload
	//	*MessageFrameData_EncryptedPayload
	Body isMessageFrameData_Body `protobuf_oneof:"body"`
	// —— 完整性&签名（可选，先不启用也不影响） —— //
	HashAlg     HashAlg `protobuf:"varint,40,opt,name=hash_alg,json=hashAlg,proto3,enum=message.v1.HashAlg" json:"hash_alg,omitempty"`
	PayloadHash []byte  `protobuf:"bytes,41,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"` // 对 body 做 hash（规范化序列化后）
	SigAlg      SigAlg  `protobuf:"varint,42,opt,name=sig_alg,json=sigAlg,proto3,enum=message.v1.SigAlg" json:"sig_alg,omitempty"`
	KeyId       string  `protobuf:"bytes,43,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 用于查找公钥
	Signature   []byte  `protobuf:"bytes,44,opt,name=signature,proto3" json:"signature,omitempty"`      // 对 (header+hash) 做签名
	// —— 加密头（预留；encrypted_payload 使用时启用） —— //
	EncAlg          EncAlg `protobuf:"varint,50,opt,name=enc_alg,json=encAlg,proto3,enum=message.v1.EncAlg" json:"enc_alg,omitempty"`
	EncKeyId        string `protobuf:"bytes,51,opt,name=enc_key_id,json=encKeyId,proto3" json:"enc_key_id,omitempty"`
	EncEphemeralPub []byte `protobuf:"bytes,52,opt,name=enc_ephemeral_pub,json=encEphemeralPub,proto3" json:"enc_ephemeral_pub,omitempty"` // 例如X25519短期公钥
	EncNonce        []byte `protobuf:"bytes,53,opt,name=enc_nonce,json=encNonce,proto3" json:"enc_nonce,omitempty"`
	// —— 版本/演进 —— //
	ApiVersion    string `protobuf:"bytes,60,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`           // "v1"
	SchemaVersion int64  `protobuf:"varint,61,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"` // 1, 2, 3…
	Version       int64  `protobuf:"varint,62,opt,name=version,proto3" json:"version,omitempty"`                                  // 协作/编辑版本（与 MessageData.edit_version 对应）
	// —— 公域/网关能力 —— //
	Intents   uint64     `protobuf:"varint,90,opt,name=intents,proto3" json:"intents,omitempty"`                      // 订阅的事件意图位图（Discord风格）
	Shard     *ShardInfo `protobuf:"bytes,91,opt,name=shard,proto3" json:"shard,omitempty"`                           // 分片信息
	Rate      *RateHint  `protobuf:"bytes,92,opt,name=rate,proto3" json:"rate,omitempty"`                             // 限速提示
	StreamSeq int64      `protobuf:"varint,93,opt,name=stream_seq,json=streamSeq,proto3" json:"stream_seq,omitempty"` // 下发连续序号（断点续传/重放控制）
	// —— 协作动作/系统事件（与 type 搭配使用） —— //
	CoopAction  *CoopAction  `protobuf:"bytes,70,opt,name=coop_action,json=coopAction,proto3" json:"coop_action,omitempty"`    // type=MESSAGE_ACTION
	SystemEvent *SystemEvent `protobuf:"bytes,71,opt,name=system_event,json=systemEvent,proto3" json:"system_event,omitempty"` // type=SYSTEM_EVENT
}

func (x *MessageFrameData) Reset() {
	*x = MessageFrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_frame_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFrameData) ProtoMessage() {}

func (x *MessageFrameData) ProtoReflect() protoreflect.Message {
	mi := &file_message_frame_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFrameData.ProtoReflect.Descriptor instead.
func (*MessageFrameData) Descriptor() ([]byte, []int) {
	return file_message_frame_proto_rawDescGZIP(), []int{0}
}

func (x *MessageFrameData) GetType() MessageFrameData_Type {
	if x != nil {
		return x.Type
	}
	return MessageFrameData_TYPE_UNSPECIFIED
}

func (x *MessageFrameData) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *MessageFrameData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *MessageFrameData) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *MessageFrameData) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *MessageFrameData) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

func (x *MessageFrameData) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *MessageFrameData) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessageFrameData) GetQos() MessageFrameData_QoS {
	if x != nil {
		return x.Qos
	}
	return MessageFrameData_QOS_AT_MOST_ONCE
}

func (x *MessageFrameData) GetPriority() MessageFrameData_Priority {
	if x != nil {
		return x.Priority
	}
	return MessageFrameData_PRIORITY_DEFAULT
}

func (x *MessageFrameData) GetAckRequired() bool {
	if x != nil {
		return x.AckRequired
	}
	return false
}

func (x *MessageFrameData) GetAckId() string {
	if x != nil {
		return x.AckId
	}
	return ""
}

func (x *MessageFrameData) GetDedupId() string {
	if x != nil {
		return x.DedupId
	}
	return ""
}

func (x *MessageFrameData) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *MessageFrameData) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *MessageFrameData) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *MessageFrameData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MessageFrameData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *MessageFrameData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MessageFrameData) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *MessageFrameData) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *MessageFrameData) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *MessageFrameData) GetBody() isMessageFrameData_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *MessageFrameData) GetPayload() *MessageData {
	if x, ok := x.GetBody().(*MessageFrameData_Payload); ok {
		return x.Payload
	}
	return nil
}

func (x *MessageFrameData) GetAnyPayload() *anypb.Any {
	if x, ok := x.GetBody().(*MessageFrameData_AnyPayload); ok {
		return x.AnyPayload
	}
	return nil
}

func (x *MessageFrameData) GetEncryptedPayload() []byte {
	if x, ok := x.GetBody().(*MessageFrameData_EncryptedPayload); ok {
		return x.EncryptedPayload
	}
	return nil
}

func (x *MessageFrameData) GetHashAlg() HashAlg {
	if x != nil {
		return x.HashAlg
	}
	return HashAlg_HASHALG_UNSPECIFIED
}

func (x *MessageFrameData) GetPayloadHash() []byte {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *MessageFrameData) GetSigAlg() SigAlg {
	if x != nil {
		return x.SigAlg
	}
	return SigAlg_SIGALG_UNSPECIFIED
}

func (x *MessageFrameData) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *MessageFrameData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *MessageFrameData) GetEncAlg() EncAlg {
	if x != nil {
		return x.EncAlg
	}
	return EncAlg_ENCALG_UNSPECIFIED
}

func (x *MessageFrameData) GetEncKeyId() string {
	if x != nil {
		return x.EncKeyId
	}
	return ""
}

func (x *MessageFrameData) GetEncEphemeralPub() []byte {
	if x != nil {
		return x.EncEphemeralPub
	}
	return nil
}

func (x *MessageFrameData) GetEncNonce() []byte {
	if x != nil {
		return x.EncNonce
	}
	return nil
}

func (x *MessageFrameData) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *MessageFrameData) GetSchemaVersion() int64 {
	if x != nil {
		return x.SchemaVersion
	}
	return 0
}

func (x *MessageFrameData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MessageFrameData) GetIntents() uint64 {
	if x != nil {
		return x.Intents
	}
	return 0
}

func (x *MessageFrameData) GetShard() *ShardInfo {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *MessageFrameData) GetRate() *RateHint {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *MessageFrameData) GetStreamSeq() int64 {
	if x != nil {
		return x.StreamSeq
	}
	return 0
}

func (x *MessageFrameData) GetCoopAction() *CoopAction {
	if x != nil {
		return x.CoopAction
	}
	return nil
}

func (x *MessageFrameData) GetSystemEvent() *SystemEvent {
	if x != nil {
		return x.SystemEvent
	}
	return nil
}

type isMessageFrameData_Body interface {
	isMessageFrameData_Body()
}

type MessageFrameData_Payload struct {
	Payload *MessageData `protobuf:"bytes,30,opt,name=payload,proto3,oneof"` // 明文业务消息
}

type MessageFrameData_AnyPayload struct {
	AnyPayload *anypb.Any `protobuf:"bytes,31,opt,name=any_payload,json=anyPayload,proto3,oneof"` // 未来扩展/异构消息体
}

type MessageFrameData_EncryptedPayload struct {
	EncryptedPayload []byte `protobuf:"bytes,32,opt,name=encrypted_payload,json=encryptedPayload,proto3,oneof"` // 预留加密载荷（后启用）
}

func (*MessageFrameData_Payload) isMessageFrameData_Body() {}

func (*MessageFrameData_AnyPayload) isMessageFrameData_Body() {}

func (*MessageFrameData_EncryptedPayload) isMessageFrameData_Body() {}

var File_message_frame_proto protoreflect.FileDescriptor

var file_message_frame_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x0f, 0x0a, 0x10, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x51, 0x6f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x64, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x6e, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c,
	0x67, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x41,
	0x6c, 0x67, 0x52, 0x06, 0x73, 0x69, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x63, 0x41, 0x6c, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x41, 0x6c, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e,
	0x63, 0x5f, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x62, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x22, 0x48, 0x0a, 0x03, 0x51,
	0x6f, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x4f, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x4f, 0x53, 0x5f,
	0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x51, 0x4f, 0x53, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x4f,
	0x4e, 0x43, 0x45, 0x10, 0x02, 0x22, 0x5a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x03, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x4a, 0x04, 0x08, 0x64, 0x10, 0x78, 0x42,
	0x20, 0x5a, 0x1e, 0x50, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_frame_proto_rawDescOnce sync.Once
	file_message_frame_proto_rawDescData = file_message_frame_proto_rawDesc
)

func file_message_frame_proto_rawDescGZIP() []byte {
	file_message_frame_proto_rawDescOnce.Do(func() {
		file_message_frame_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_frame_proto_rawDescData)
	})
	return file_message_frame_proto_rawDescData
}

var file_message_frame_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_message_frame_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_frame_proto_goTypes = []any{
	(MessageFrameData_Type)(0),     // 0: message.v1.MessageFrameData.Type
	(MessageFrameData_QoS)(0),      // 1: message.v1.MessageFrameData.QoS
	(MessageFrameData_Priority)(0), // 2: message.v1.MessageFrameData.Priority
	(*MessageFrameData)(nil),       // 3: message.v1.MessageFrameData
	nil,                            // 4: message.v1.MessageFrameData.MetaEntry
	(*MessageData)(nil),            // 5: message.v1.MessageData
	(*anypb.Any)(nil),              // 6: google.protobuf.Any
	(HashAlg)(0),                   // 7: message.v1.HashAlg
	(SigAlg)(0),                    // 8: message.v1.SigAlg
	(EncAlg)(0),                    // 9: message.v1.EncAlg
	(*ShardInfo)(nil),              // 10: message.v1.ShardInfo
	(*RateHint)(nil),               // 11: message.v1.RateHint
	(*CoopAction)(nil),             // 12: message.v1.CoopAction
	(*SystemEvent)(nil),            // 13: message.v1.SystemEvent
}
var file_message_frame_proto_depIdxs = []int32{
	0,  // 0: message.v1.MessageFrameData.type:type_name -> message.v1.MessageFrameData.Type
	1,  // 1: message.v1.MessageFrameData.qos:type_name -> message.v1.MessageFrameData.QoS
	2,  // 2: message.v1.MessageFrameData.priority:type_name -> message.v1.MessageFrameData.Priority
	4,  // 3: message.v1.MessageFrameData.meta:type_name -> message.v1.MessageFrameData.MetaEntry
	5,  // 4: message.v1.MessageFrameData.payload:type_name -> message.v1.MessageData
	6,  // 5: message.v1.MessageFrameData.any_payload:type_name -> google.protobuf.Any
	7,  // 6: message.v1.MessageFrameData.hash_alg:type_name -> message.v1.HashAlg
	8,  // 7: message.v1.MessageFrameData.sig_alg:type_name -> message.v1.SigAlg
	9,  // 8: message.v1.MessageFrameData.enc_alg:type_name -> message.v1.EncAlg
	10, // 9: message.v1.MessageFrameData.shard:type_name -> message.v1.ShardInfo
	11, // 10: message.v1.MessageFrameData.rate:type_name -> message.v1.RateHint
	12, // 11: message.v1.MessageFrameData.coop_action:type_name -> message.v1.CoopAction
	13, // 12: message.v1.MessageFrameData.system_event:type_name -> message.v1.SystemEvent
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_message_frame_proto_init() }
func file_message_frame_proto_init() {
	if File_message_frame_proto != nil {
		return
	}
	file_message_message_proto_init()
	file_message_security_proto_init()
	file_message_session_proto_init()
	file_message_collab_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_frame_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageFrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_frame_proto_msgTypes[0].OneofWrappers = []any{
		(*MessageFrameData_Payload)(nil),
		(*MessageFrameData_AnyPayload)(nil),
		(*MessageFrameData_EncryptedPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_frame_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_frame_proto_goTypes,
		DependencyIndexes: file_message_frame_proto_depIdxs,
		EnumInfos:         file_message_frame_proto_enumTypes,
		MessageInfos:      file_message_frame_proto_msgTypes,
	}.Build()
	File_message_frame_proto = out.File
	file_message_frame_proto_rawDesc = nil
	file_message_frame_proto_goTypes = nil
	file_message_frame_proto_depIdxs = nil
}
