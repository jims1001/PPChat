// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: router.proto

package messagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Router_Gateway_FullMethodName = "/router.Router/Gateway"
)

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	Gateway(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Gateway(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], Router_Gateway_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &routerGatewayClient{ClientStream: stream}
	return x, nil
}

type Router_GatewayClient interface {
	Send(*MessageFrame) error
	Recv() (*MessageFrame, error)
	grpc.ClientStream
}

type routerGatewayClient struct {
	grpc.ClientStream
}

func (x *routerGatewayClient) Send(m *MessageFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerGatewayClient) Recv() (*MessageFrame, error) {
	m := new(MessageFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	Gateway(Router_GatewayServer) error
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) Gateway(Router_GatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method Gateway not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_Gateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).Gateway(&routerGatewayServer{ServerStream: stream})
}

type Router_GatewayServer interface {
	Send(*MessageFrame) error
	Recv() (*MessageFrame, error)
	grpc.ServerStream
}

type routerGatewayServer struct {
	grpc.ServerStream
}

func (x *routerGatewayServer) Send(m *MessageFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerGatewayServer) Recv() (*MessageFrame, error) {
	m := new(MessageFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "router.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gateway",
			Handler:       _Router_Gateway_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
